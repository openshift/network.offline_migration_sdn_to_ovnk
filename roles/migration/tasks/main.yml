---
- name: Check all cluster operators are normal and mcp's are not in updating or degraded state
  network.offline_migration_sdn_to_ovnk.verify_cluster_operators_health:
    max_timeout: 2700
    pause_between_checks: 30
    required_success_count: 3
    checks: "{{ migration_checks }}"
  register: result

- name: Check for conflicting CIDR ranges
  network.offline_migration_sdn_to_ovnk.check_cidr_ranges:
    conflicting_ranges: "{{ migration_conflicting_cidr_ranges }}"
  register: result

- name: Display conflicting CIDRs if found
  when: result.failed
  ansible.builtin.debug:
    msg: >
      Conflicting CIDRs detected: {{ result.conflicting_cidrs }}.
      CIDRs in use: {{ result.used_cidrs }}.

- name: Inform the user that no conflicts were found
  when: result.msg == "No conflicting CIDR ranges found."
  ansible.builtin.debug:
    msg: "{{ result.msg }}"

- name: Check if the cluster is configured with NetworkPolicy isolation mode
  network.offline_migration_sdn_to_ovnk.check_network_policy_mode:
  register: result

- name: Notify user if NetworkPolicy isolation mode is not set
  when: result.failed
  ansible.builtin.debug:
    msg: "{{ result.msg }}"

- name: Confirm that NetworkPolicy isolation mode is set
  when: not result.failed
  ansible.builtin.debug:
    msg: "{{ result.msg }}"

- name: Patch Network.operator.openshift.io and wait for migration field to clear
  network.offline_migration_sdn_to_ovnk.clean_migration_field:
    timeout: "{{ migration_clean_migration_timeout }}"

- name: Check if NNCP CRD exists with retries
  ansible.builtin.command: oc get crd nodenetworkconfigurationpolicies.nmstate.io -o name
  register: crd_check
  retries: 5
  delay: 5
  until: crd_check.rc == 0 and 'nodenetworkconfigurationpolicies.nmstate.io' in crd_check.stdout
  changed_when: false
  ignore_errors: true

- name: Set interface_name fact
  ansible.builtin.set_fact:
    interface_name: "{{ migration_interface_name }}"
  when: migration_interface_name is defined

- name: Delete NNCP for primary interface if exists
  network.offline_migration_sdn_to_ovnk.delete_primary_nncp:
    interface_name: "{{ interface_name }}"
  when:
    - interface_name is defined
    - interface_name | length > 0
    - crd_check

- name: Check if disable auto migration is set
  ansible.builtin.set_fact:
    disable_auto_migration: "{{ migration_disable_auto_migration }}"
  failed_when: disable_auto_migration is not defined

- name: Display message when disable_auto_migration is set to true
  ansible.builtin.debug:
    msg: "disable_auto_migration is set to {{ migration_disable_auto_migration }}."

- name: Change network type to trigger MCO update
  when: not (disable_auto_migration | default(false) | bool) # runs only when the var is false
  network.offline_migration_sdn_to_ovnk.change_network_type:
    network_type: "{{ migration_network_type }}"
    timeout: "{{ migration_change_migration_timeout }}"

- name: Get OpenShift version using custom module
  network.offline_migration_sdn_to_ovnk.get_ocp_version:
    retries: 3
    delay: 5
  register: openshift_version_result
  failed_when: openshift_version_result.version is not defined

- name: Parse OpenShift version and determine if it's >= 4.12
  ansible.builtin.set_fact:
    version_major: "{{ openshift_version_result.version.split('.')[0] | int }}"
    version_minor: "{{ openshift_version_result.version.split('.')[1] | int }}"

- name: Warn if OpenShift version is < 4.12
  ansible.builtin.debug:
    msg: >
      Warning: The OpenShift version is {{ ocp_version }}. EgressIP, EgressFirewall,
      and multicast features of SDN won't be automatically migrated to OVNKubernetes.
      You need to configure them manually.
  when:
    - version_major | int == 4
    - version_minor | int <= 11

- name: Apply SDN Migration Settings if OpenShift is 4.12 or Higher
  when:
    - version_major | int == 4
    - version_minor | int >= 12
    - disable_auto_migration | bool
  block:
    - name: Disable OpenShift SDN Migration Features
      network.offline_migration_sdn_to_ovnk.disable_automatic_migration:
        network_type: "{{ migration_network_type }}"
        egress_ip: "{{ migration_egress_ip | default(omit) }}"
        egress_firewall: "{{ migration_egress_firewall | default(omit) }}"
        multicast: "{{ migration_multicast | default(omit) }}"
      register: patch_result

    - name: Display Patch Result
      ansible.builtin.debug:
        var: patch_result

- name: Customize network settings if parameters are provided
  network.offline_migration_sdn_to_ovnk.configure_network_settings:
    configure_network_type: "{{ migration_configure_network_type }}"
    mtu: "{{ migration_mtu | default(omit) }}"
    geneve_port: "{{ migration_geneve_port | default(omit) }}"
    ipv4_subnet: "{{ migration_ipv4_subnet | default(omit) }}"
    routing_via_host: "{{ migration_routing_via_host | default(omit) }}"
    ip_forwarding: "{{ migration_ip_forwarding | default(omit) }}"
    retries: 3
    delay: 5
  register: patch_result

- name: Debug patch result
  ansible.builtin.debug:
    msg: "{{ patch_result.msg }}"

- name: Wait until MCO starts applying new machine config to nodes
  network.offline_migration_sdn_to_ovnk.wait_for_mco:
    timeout: "{{ migration_mco_timeout }}"
  register: mco_status

- name: Print MCO status message
  ansible.builtin.debug:
    msg: "{{ mco_status.msg }}"

- name: Wait for MCO to finish its work
  network.offline_migration_sdn_to_ovnk.wait_for_mco_completion:
    timeout: "{{ migration_mcp_completion_timeout }}"

- name: Verify machine configuration status on nodes
  network.offline_migration_sdn_to_ovnk.verify_machine_config:
    timeout: "{{ migration_verify_machine_config_timeout }}"
    network_type: "OVNKubernetes"

- name: Trigger OVN-Kubernetes deployment
  network.offline_migration_sdn_to_ovnk.trigger_network_type:
    network_type: "{{ migration_network_type }}"
    timeout: "{{ migration_ovn_co_timeout }}"
    cidr: "{{ migration_cidr | default(omit) }}"
    prefix: "{{ migration_prefix | default(omit) }}"

- name: Wait until the Network Cluster Operator is in PROGRESSING=True state
  network.offline_migration_sdn_to_ovnk.wait_for_network_co:
    timeout: "{{ migration_ovn_co_timeout }}"
  register: network_co_status

- name: Display the status of the Network Cluster Operator
  ansible.builtin.debug:
    msg: "{{ network_co_status.msg }}"

- name: Wait for Multus pods to restart
  network.offline_migration_sdn_to_ovnk.wait_multus_restart:
    timeout: "{{ migration_ovn_multus_timeout }}"

---
- name: End-to-End Test for configure_network_settings module
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Apply network configuration changes
      network.offline_migration_sdn_to_ovnk.configure_network_settings:
        configure_network_type: ovnKubernetes
      register: patch_result

    - name: Debug applied patch result
      ansible.builtin.debug:
        msg: "{{ patch_result.msg }}"

    - name: Apply network configuration changes
      network.offline_migration_sdn_to_ovnk.configure_network_settings:
        configure_network_type: ovnKubernetes
        mtu: 1400
        geneve_port: 6081
        ipv4_subnet: "192.168.1.0/24"
        routing_via_host: true # True sets local gateway
        ip_forwarding: Global
        retries: 3
        delay: 5
      register: test_result_valid_ovn
      ignore_errors: true

    - name: Debug module output (Valid ovnKubernetes)
      ansible.builtin.debug:
        var: test_result_valid_ovn

    - name: Fetch updated network configuration
      ansible.builtin.command: oc get Network.operator.openshift.io cluster -o json
      register: network_status
      changed_when: false

    - name: Parse network configuration
      ansible.builtin.set_fact:
        network_data: "{{ network_status.stdout | from_json }}"

    - name: Verify OVNKubernetes settings
      ansible.builtin.assert:
        that:
          - network_data.spec.defaultNetwork.ovnKubernetesConfig.mtu == 1400
          - network_data.spec.defaultNetwork.ovnKubernetesConfig.genevePort == 6081
          - network_data.spec.defaultNetwork.ovnKubernetesConfig.v4InternalSubnet == "192.168.1.0/24"
          - network_data.spec.defaultNetwork.ovnKubernetesConfig.gatewayConfig.ipForwarding == "Global"
          - network_data.spec.defaultNetwork.ovnKubernetesConfig.gatewayConfig.routingViaHost == true
        fail_msg: "Network configuration does not match expected values!"
        success_msg: "Network configuration successfully updated!"

    - name: Revert network configuration to default
      network.offline_migration_sdn_to_ovnk.configure_network_settings:
        configure_network_type: ovnKubernetes
        mtu: 1500
        geneve_port: 6081
        retries: 3
        delay: 5
      register: revert_result

    - name: Debug revert result
      ansible.builtin.debug:
        msg: "{{ revert_result.msg }}"

    - name: Validate network settings reverted
      ansible.builtin.command: oc get Network.operator.openshift.io cluster -o json
      register: reverted_network_status
      changed_when: false

    - name: Parse reverted network configuration
      ansible.builtin.set_fact:
        reverted_network_data: "{{ reverted_network_status.stdout | from_json }}"

    - name: Verify reverted settings
      ansible.builtin.assert:
        that:
          - reverted_network_data.spec.defaultNetwork.ovnKubernetesConfig.mtu == 1500
          - reverted_network_data.spec.defaultNetwork.ovnKubernetesConfig.genevePort == 6081
          # TODO check what different value could be added
          - reverted_network_data.spec.defaultNetwork.ovnKubernetesConfig.v4InternalSubnet == "192.168.1.0/24"
        fail_msg: "Reverted network configuration does not match expected values!"
        success_msg: "Network configuration successfully reverted to default!"

    - name: Apply network configuration changes
      network.offline_migration_sdn_to_ovnk.configure_network_settings:
        configure_network_type: ovnKubernetes
      register: patch_result

    - name: Debug applied patch result
      ansible.builtin.debug:
        msg: "{{ patch_result.msg }}"

    # ✅ Test Case 1: Valid Input (ovnKubernetes, MTU and Geneve Port)
    - name: Run patch_network module with ovnKubernetes
      network.offline_migration_sdn_to_ovnk.configure_network_settings:
        configure_network_type: "ovnKubernetes"
        mtu: 1400
        geneve_port: 6081
      register: test_result_valid_ovn
      ignore_errors: true

    - name: Debug module output (Valid ovnKubernetes)
      ansible.builtin.debug:
        var: test_result_valid_ovn

    - name: Verify ovnKubernetesConfig was applied
      ansible.builtin.command: oc get Network.operator.openshift.io cluster -o jsonpath='{.spec.defaultNetwork.ovnKubernetesConfig}'
      register: check_ovn_config
      changed_when: false

    - name: Assert ovnKubernetesConfig was correctly set
      ansible.builtin.assert:
        that:
          - '"1400" in check_ovn_config.stdout'
          - '"6081" in check_ovn_config.stdout'
      when: test_result_valid_ovn is success

    # ✅ Test Case 2: Valid Input (openshiftSDN, MTU and VXLAN Port)
    - name: Run patch_network module with openshiftSDN
      network.offline_migration_sdn_to_ovnk.configure_network_settings:
        configure_network_type: "openshiftSDN"
        mtu: 1450
        vxlanPort: 4789
      register: test_result_valid_sdn
      ignore_errors: true

    - name: Debug module output (Valid openshiftSDN)
      ansible.builtin.debug:
        var: test_result_valid_sdn

    - name: Verify openshiftSDNConfig was applied
      ansible.builtin.command: oc get Network.operator.openshift.io cluster -o jsonpath='{.spec.defaultNetwork.openshiftSDNConfig}'
      register: check_sdn_config
      changed_when: false

    - name: Assert openshiftSDNConfig was correctly set
      ansible.builtin.assert:
        that:
          - '"1450" in check_sdn_config.stdout'
          - '"4789" in check_sdn_config.stdout'
      when: test_result_valid_sdn is success

    # ❌ Test Case 3: Invalid Network Type
    - name: Run patch_network module with invalid network type
      network.offline_migration_sdn_to_ovnk.configure_network_settings:
        configure_network_type: "invalidNetwork"
        mtu: 1400
      register: test_result_invalid_network
      ignore_errors: true

    - name: Debug module output (Invalid Network Type)
      ansible.builtin.debug:
        var: test_result_invalid_network

    - name: Assert failure for invalid network type
      ansible.builtin.assert:
        that:
          - test_result_invalid_network is failed
          - "'value of configure_network_type must be one of: ovnKubernetes, openshiftSDN, got: invalidNetwork' in test_result_invalid_network.msg"
      when: test_result_invalid_network is failed

    # ❌ Test Case 4: No Parameters Provided
    - name: Run patch_network module without parameters
      network.offline_migration_sdn_to_ovnk.configure_network_settings:
        configure_network_type: "ovnKubernetes"
      register: test_result_no_params
      ignore_errors: true

    - name: Debug module output (No Parameters Provided)
      ansible.builtin.debug:
        var: test_result_no_params

    - name: Assert failure for no parameters
      ansible.builtin.assert:
        that:
          - test_result_no_params is failed
          - "'No changes required. No valid parameters provided.' in test_result_no_params.msg"
      when: test_result_no_params is failed

    # ❌ Test Case 5: Invalid Parameters for Network Type
    - name: Run patch_network module with vxlanPort in ovnKubernetes
      network.offline_migration_sdn_to_ovnk.configure_network_settings:
        configure_network_type: "ovnKubernetes"
        vxlanPort: 4789
      register: test_result_invalid_param
      ignore_errors: true

    - name: Debug module output (Invalid Parameter for ovnKubernetes)
      ansible.builtin.debug:
        var: test_result_invalid_param

    - name: Assert warning for invalid parameter
      ansible.builtin.assert:
        that:
          - "'vxlanPort' in test_result_invalid_param.warnings[0]"
      when: test_result_invalid_param is success

    # ✅ Test Case 6: Check Mode (Dry Run)
    - name: Run patch_network module in check mode
      network.offline_migration_sdn_to_ovnk.configure_network_settings:
        configure_network_type: "ovnKubernetes"
        mtu: 1400
      register: test_result_check_mode
      check_mode: true

    - name: Debug module output (Check Mode)
      ansible.builtin.debug:
        var: test_result_check_mode

    - name: Assert check mode does not apply changes
      ansible.builtin.assert:
        that:
          - "'Check mode: Patch command prepared' in test_result_check_mode.msg"
      when: test_result_check_mode is success

    # ✅ Rollback: Remove Config Fields Only (Retain Network Type)
    - name: Revert ovnKubernetesConfig if it was set
      ansible.builtin.command: >
        oc patch Network.operator.openshift.io cluster --type=merge --patch
        '{"spec": {"defaultNetwork": {"ovnKubernetesConfig": null}}}'
      register: revert_result_ovn
      changed_when: "'patched' in revert_result_ovn.stdout or 'unchanged' in revert_result_ovn.stdout"
      failed_when: revert_result_ovn.rc != 0
      when: "'Network configuration patched successfully' in test_result_valid_ovn.msg"

    - name: Revert openshiftSDNConfig if it was set
      ansible.builtin.command: >
        oc patch Network.operator.openshift.io cluster --type=merge --patch
        '{"spec": {"defaultNetwork": {"openshiftSDNConfig": null}}}'
      register: revert_result_sdn
      changed_when: "'patched' in revert_result_sdn.stdout or 'unchanged' in revert_result_sdn.stdout"
      failed_when: revert_result_sdn.rc != 0
      when: "'Network configuration patched successfully' in test_result_valid_sdn.msg"

    - name: Debug Network Configuration Reset Result
      ansible.builtin.debug:
        var: revert_result_ovn
      when: "'Network configuration patched successfully' in test_result_valid_ovn.msg"

    - name: Debug Network Configuration Reset Result
      ansible.builtin.debug:
        var: revert_result_sdn
      when: "'Network configuration patched successfully' in test_result_valid_sdn.msg"

    - name: Assert Network Configuration is Reverted for ovnKubernetes
      ansible.builtin.assert:
        that:
          - "'patched' in revert_result_ovn.stdout or 'unchanged' in revert_result_ovn.stdout"
      when: "'Network configuration patched successfully' in test_result_valid_ovn.msg"

    - name: Assert Network Configuration is Reverted for openshiftSDN
      ansible.builtin.assert:
        that:
          - "'patched' in revert_result_sdn.stdout or 'unchanged' in revert_result_sdn.stdout"
      when: "'Network configuration patched successfully' in test_result_valid_sdn.msg"
